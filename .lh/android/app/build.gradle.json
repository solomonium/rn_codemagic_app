{
    "sourceFile": "android/app/build.gradle",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1746199193575,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1746199245127,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -102,17 +102,17 @@\n             keyPassword 'android'\n         }\n         release {\n               if (System.getenv()[\"CI\"]) { // CI=true is exported by Codemagic\n-                  storeFile file(System.getenv()[\"CM_KEYSTORE_PATH\"])\n-                  storePassword System.getenv()[\"CM_KEYSTORE_PASSWORD\"]\n-                  keyAlias System.getenv()[\"CM_KEY_ALIAS\"]\n-                  keyPassword System.getenv()[\"CM_KEY_PASSWORD\"]\n-              } else {\n-                  keyAlias keystoreProperties['keyAlias']\n-                  keyPassword keystoreProperties['keyPassword']\n-                  storeFile keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : null\n-                  storePassword keystoreProperties['storePassword']\n+                    storeFile file(System.getenv()[\"CM_KEYSTORE_PATH\"])\n+                    storePassword System.getenv()[\"CM_KEYSTORE_PASSWORD\"]\n+                    keyAlias System.getenv()[\"CM_KEY_ALIAS\"]\n+                    keyPassword System.getenv()[\"CM_KEY_PASSWORD\"]\n+                } else {\n+                    keyAlias keystoreProperties['keyAlias']\n+                    keyPassword keystoreProperties['keyPassword']\n+                    storeFile keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : null\n+                    storePassword keystoreProperties['storePassword']\n               }\n           }\n     }\n     buildTypes {\n@@ -121,9 +121,9 @@\n         }\n         release {\n             // Caution! In production, you need to generate your own keystore file.\n             // see https://reactnative.dev/docs/signed-apk-android.\n-            signingConfig signingConfigs.debug\n+            signingConfig signingConfigs.release\n             shrinkResources (findProperty('android.enableShrinkResourcesInReleaseBuilds')?.toBoolean() ?: false)\n             minifyEnabled enableProguardInReleaseBuilds\n             proguardFiles getDefaultProguardFile(\"proguard-android.txt\"), \"proguard-rules.pro\"\n             crunchPngs (findProperty('android.enablePngCrunchInReleaseBuilds')?.toBoolean() ?: true)\n"
                }
            ],
            "date": 1746199193575,
            "name": "Commit-0",
            "content": "apply plugin: \"com.android.application\"\napply plugin: \"org.jetbrains.kotlin.android\"\napply plugin: \"com.facebook.react\"\n\ndef projectRoot = rootDir.getAbsoluteFile().getParentFile().getAbsolutePath()\n\n/**\n * This is the configuration block to customize your React Native Android app.\n * By default you don't need to apply any configuration, just uncomment the lines you need.\n */\nreact {\n    entryFile = file([\"node\", \"-e\", \"require('expo/scripts/resolveAppEntry')\", projectRoot, \"android\", \"absolute\"].execute(null, rootDir).text.trim())\n    reactNativeDir = new File([\"node\", \"--print\", \"require.resolve('react-native/package.json')\"].execute(null, rootDir).text.trim()).getParentFile().getAbsoluteFile()\n    hermesCommand = new File([\"node\", \"--print\", \"require.resolve('react-native/package.json')\"].execute(null, rootDir).text.trim()).getParentFile().getAbsolutePath() + \"/sdks/hermesc/%OS-BIN%/hermesc\"\n    codegenDir = new File([\"node\", \"--print\", \"require.resolve('@react-native/codegen/package.json', { paths: [require.resolve('react-native/package.json')] })\"].execute(null, rootDir).text.trim()).getParentFile().getAbsoluteFile()\n\n    // Use Expo CLI to bundle the app, this ensures the Metro config\n    // works correctly with Expo projects.\n    cliFile = new File([\"node\", \"--print\", \"require.resolve('@expo/cli', { paths: [require.resolve('expo/package.json')] })\"].execute(null, rootDir).text.trim())\n    bundleCommand = \"export:embed\"\n\n    /* Folders */\n     //   The root of your project, i.e. where \"package.json\" lives. Default is '../..'\n    // root = file(\"../../\")\n    //   The folder where the react-native NPM package is. Default is ../../node_modules/react-native\n    // reactNativeDir = file(\"../../node_modules/react-native\")\n    //   The folder where the react-native Codegen package is. Default is ../../node_modules/@react-native/codegen\n    // codegenDir = file(\"../../node_modules/@react-native/codegen\")\n\n    /* Variants */\n    //   The list of variants to that are debuggable. For those we're going to\n    //   skip the bundling of the JS bundle and the assets. By default is just 'debug'.\n    //   If you add flavors like lite, prod, etc. you'll have to list your debuggableVariants.\n    // debuggableVariants = [\"liteDebug\", \"prodDebug\"]\n\n    /* Bundling */\n    //   A list containing the node command and its flags. Default is just 'node'.\n    // nodeExecutableAndArgs = [\"node\"]\n\n    //\n    //   The path to the CLI configuration file. Default is empty.\n    // bundleConfig = file(../rn-cli.config.js)\n    //\n    //   The name of the generated asset file containing your JS bundle\n    // bundleAssetName = \"MyApplication.android.bundle\"\n    //\n    //   The entry file for bundle generation. Default is 'index.android.js' or 'index.js'\n    // entryFile = file(\"../js/MyApplication.android.js\")\n    //\n    //   A list of extra flags to pass to the 'bundle' commands.\n    //   See https://github.com/react-native-community/cli/blob/main/docs/commands.md#bundle\n    // extraPackagerArgs = []\n\n    /* Hermes Commands */\n    //   The hermes compiler command to run. By default it is 'hermesc'\n    // hermesCommand = \"$rootDir/my-custom-hermesc/bin/hermesc\"\n    //\n    //   The list of flags to pass to the Hermes compiler. By default is \"-O\", \"-output-source-map\"\n    // hermesFlags = [\"-O\", \"-output-source-map\"]\n\n    /* Autolinking */\n    autolinkLibrariesWithApp()\n}\n\n/**\n * Set this to true to Run Proguard on Release builds to minify the Java bytecode.\n */\ndef enableProguardInReleaseBuilds = (findProperty('android.enableProguardInReleaseBuilds') ?: false).toBoolean()\n\n/**\n * The preferred build flavor of JavaScriptCore (JSC)\n *\n * For example, to use the international variant, you can use:\n * `def jscFlavor = 'org.webkit:android-jsc-intl:+'`\n *\n * The international variant includes ICU i18n library and necessary data\n * allowing to use e.g. `Date.toLocaleString` and `String.localeCompare` that\n * give correct results when using with locales other than en-US. Note that\n * this variant is about 6MiB larger per architecture than default.\n */\ndef jscFlavor = 'org.webkit:android-jsc:+'\n\nandroid {\n    ndkVersion rootProject.ext.ndkVersion\n\n    buildToolsVersion rootProject.ext.buildToolsVersion\n    compileSdk rootProject.ext.compileSdkVersion\n\n    namespace 'io.codemagic.sample.reactnative'\n    defaultConfig {\n        applicationId 'io.codemagic.sample.reactnative'\n        minSdkVersion rootProject.ext.minSdkVersion\n        targetSdkVersion rootProject.ext.targetSdkVersion\n        versionCode 1\n        versionName \"1.0.0\"\n    }\n    signingConfigs {\n        debug {\n            storeFile file('debug.keystore')\n            storePassword 'android'\n            keyAlias 'androiddebugkey'\n            keyPassword 'android'\n        }\n        release {\n              if (System.getenv()[\"CI\"]) { // CI=true is exported by Codemagic\n                  storeFile file(System.getenv()[\"CM_KEYSTORE_PATH\"])\n                  storePassword System.getenv()[\"CM_KEYSTORE_PASSWORD\"]\n                  keyAlias System.getenv()[\"CM_KEY_ALIAS\"]\n                  keyPassword System.getenv()[\"CM_KEY_PASSWORD\"]\n              } else {\n                  keyAlias keystoreProperties['keyAlias']\n                  keyPassword keystoreProperties['keyPassword']\n                  storeFile keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : null\n                  storePassword keystoreProperties['storePassword']\n              }\n          }\n    }\n    buildTypes {\n        debug {\n            signingConfig signingConfigs.debug\n        }\n        release {\n            // Caution! In production, you need to generate your own keystore file.\n            // see https://reactnative.dev/docs/signed-apk-android.\n            signingConfig signingConfigs.debug\n            shrinkResources (findProperty('android.enableShrinkResourcesInReleaseBuilds')?.toBoolean() ?: false)\n            minifyEnabled enableProguardInReleaseBuilds\n            proguardFiles getDefaultProguardFile(\"proguard-android.txt\"), \"proguard-rules.pro\"\n            crunchPngs (findProperty('android.enablePngCrunchInReleaseBuilds')?.toBoolean() ?: true)\n        }\n    }\n    packagingOptions {\n        jniLibs {\n            useLegacyPackaging (findProperty('expo.useLegacyPackaging')?.toBoolean() ?: false)\n        }\n    }\n    androidResources {\n        ignoreAssetsPattern '!.svn:!.git:!.ds_store:!*.scc:!CVS:!thumbs.db:!picasa.ini:!*~'\n    }\n}\n\n// Apply static values from `gradle.properties` to the `android.packagingOptions`\n// Accepts values in comma delimited lists, example:\n// android.packagingOptions.pickFirsts=/LICENSE,**/picasa.ini\n[\"pickFirsts\", \"excludes\", \"merges\", \"doNotStrip\"].each { prop ->\n    // Split option: 'foo,bar' -> ['foo', 'bar']\n    def options = (findProperty(\"android.packagingOptions.$prop\") ?: \"\").split(\",\");\n    // Trim all elements in place.\n    for (i in 0..<options.size()) options[i] = options[i].trim();\n    // `[] - \"\"` is essentially `[\"\"].filter(Boolean)` removing all empty strings.\n    options -= \"\"\n\n    if (options.length > 0) {\n        println \"android.packagingOptions.$prop += $options ($options.length)\"\n        // Ex: android.packagingOptions.pickFirsts += '**/SCCS/**'\n        options.each {\n            android.packagingOptions[prop] += it\n        }\n    }\n}\n\ndependencies {\n    // The version of react-native is set by the React Native Gradle Plugin\n    implementation(\"com.facebook.react:react-android\")\n\n    def isGifEnabled = (findProperty('expo.gif.enabled') ?: \"\") == \"true\";\n    def isWebpEnabled = (findProperty('expo.webp.enabled') ?: \"\") == \"true\";\n    def isWebpAnimatedEnabled = (findProperty('expo.webp.animated') ?: \"\") == \"true\";\n\n    if (isGifEnabled) {\n        // For animated gif support\n        implementation(\"com.facebook.fresco:animated-gif:${reactAndroidLibs.versions.fresco.get()}\")\n    }\n\n    if (isWebpEnabled) {\n        // For webp support\n        implementation(\"com.facebook.fresco:webpsupport:${reactAndroidLibs.versions.fresco.get()}\")\n        if (isWebpAnimatedEnabled) {\n            // Animated webp support\n            implementation(\"com.facebook.fresco:animated-webp:${reactAndroidLibs.versions.fresco.get()}\")\n        }\n    }\n\n    if (hermesEnabled.toBoolean()) {\n        implementation(\"com.facebook.react:hermes-android\")\n    } else {\n        implementation jscFlavor\n    }\n}\n"
        }
    ]
}